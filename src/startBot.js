import { InlineKeyboard, Keyboard, session } from 'grammy';
import { commands } from './commands/commands.js';

import {
  pickDriverCallback,
  cancelReservationCallback,
  reserveTaxiCallback,
  closeTaxiRequestCallback,
  cancelReservationTaxiCallback,
  bookTaxiCallback,
} from './callbacks/index.js';

import {
  handlePassengerRegistration,
  handleDriverRegistration,
} from './domains/registration/registerUser.js';
import { handleTaxiRequestCreation } from './domains/taxiRequest/taxiDriver/createTaxiRequest.js';
import { rideInATaxi } from './domains/taxiRequest/taxiDriver/rideInATaxi.js';
import { showUserProfile } from './domains/userManagement/getUserProfile.js';
import { updateUserProfile } from './domains/userManagement/updateUserProfile.js';
import { closeTaxiRequest } from './domains/taxiRequest/taxiDriver/closeTaxiRequest.js';
import { bookTaxi } from './domains/taxiRequest/passenger/bookTaxi.js';
import { cancelBookTaxi } from './domains/taxiRequest/passenger/cancelBookTaxi.js';
import { showMyTaxi } from './domains/taxiRequest/passenger/showMyTaxi.js';
import { showMyCompanions } from './domains/taxiRequest/taxiDriver/showMyCompanions.js';
import { myReservations } from './domains/bookRide/passenger/myReservations.js';
import { myPassengers } from './domains/bookRide/driver/myPassengers.js';
import { showDrivers } from './domains/bookRide/passenger/showDrivers.js';
import { pickDriver } from './domains/bookRide/passenger/pickDriver.js';
import { cancelBook } from './domains/bookRide/passenger/cancelBook.js';
import { showMyCompanionsAsPassenger } from './domains/taxiRequest/passenger/showMyCompanions.js';
import {
  helpCallback,
  loginOrRegisterCallback,
} from './callbacks/menuCallbacks.js';

import {
  showColleagueKeyboardPassenger,
  showMainMenuDrivers,
  showMainMenuPassenger,
  showPassengerOrderedTaxiKeyboard,
  showPassengerTaxiKeyboard,
  showTaxiKeyboard,
  showUserProfileMenu,
} from './utils/keyboards.js';

const startBot = (bot) => {
  bot.use(
    session({
      initial: () => ({
        userData: {},
        registrationStep: null,
        isLoggedIn: null,
        role: null,
      }),
    })
  );

  bot.api.setMyCommands(commands);

  bot.command('menu', async (ctx) => {
    const role = ctx.session.role;

    let keyboard;

    if (role === 'driver') {
      keyboard = [
        [{ text: '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤' }],
        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }],
        [{ text: '‚ÑπÔ∏è –û –±–æ—Ç–µ' }],
      ];
    } else if (role === 'passenger') {
      keyboard = [
        [{ text: 'üöó –ö–æ–ª–ª–µ–≥–∞ - –≤–æ–¥–∏—Ç–µ–ª—å' }],
        [{ text: 'üöï –¢–∞–∫—Å–∏' }],
        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' }],
        [{ text: '‚ÑπÔ∏è –û –±–æ—Ç–µ' }],
      ];
    } else {
      keyboard = [[{ text: 'üîë –í—Ö–æ–¥ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' }], [{ text: '‚ÑπÔ∏è –û –±–æ—Ç–µ' }]];
    }

    const message = await ctx.reply('–ú–µ–Ω—é:', {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });

    ctx.session.lastMessageId = message.message_id;
  });

  bot.command('start', async (ctx) => {
    const startKeyboard = new InlineKeyboard()
      .text('–í–æ–¥–∏—Ç–µ–ª—å', 'driver')
      .text('–ü–∞—Å—Å–∞–∂–∏—Ä', 'passenger');

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç —è CarShareBot! üëã

      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ. üöó

      –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ(/help), –∏ –º—ã –ø–æ–º–æ–∂–µ–º!

      –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!`,
      {
        reply_markup: startKeyboard,
      }
    );
  });

  bot.command('help', async (ctx) => {
    helpCallback(ctx);
  });

  bot.command('my_reservations', async (ctx) => {
    myReservations(ctx);
  });

  bot.command('show_my_passengers', async (ctx) => {
    myPassengers(ctx);
  });

  bot.command('show_drivers', async (ctx) => {
    showDrivers(ctx);
  });

  bot.callbackQuery('driver', async (ctx) => {
    ctx.session.role = 'driver';
    ctx.session.registrationStep = 'ask_name';

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è: ');

    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });
  });

  bot.callbackQuery('passenger', async (ctx) => {
    ctx.session.role = 'passenger';
    ctx.session.registrationStep = 'ask_name';

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è: ');

    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });
  });

  bot.command('show_profile', async (ctx) => {
    showUserProfile(ctx);
  });

  bot.command('update_profile', async (ctx) => {
    updateUserProfile(ctx);
  });

  bot.command('show_my_taxi', async (ctx) => {
    showMyTaxi(ctx);
  });

  bot.command('show_my_companions', async (ctx) => {
    showMyCompanions(ctx);
  });

  bot.command('show_my_companions_as_passenger', async (ctx) => {
    showMyCompanionsAsPassenger(ctx);
  });

  bot.command('book', async (ctx) => {
    pickDriver(ctx);
  });

  bot.command('book_taxi', async (ctx) => {
    bookTaxi(ctx);
  });

  bot.command('cancel_reservation', async (ctx) => {
    cancelBook(ctx);
  });

  bot.command('cancel_book_taxi', async (ctx) => {
    cancelBookTaxi(ctx);
  });

  bot.command('ride_in_a_taxi', async (ctx) => {
    await rideInATaxi(ctx);
  });

  bot.command('close_taxi_request', async (ctx) => {
    closeTaxiRequest(ctx);
  });

  bot.on('callback_query:data', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      const data = ctx.callbackQuery.data;

      pickDriverCallback(data, ctx);
      cancelReservationCallback(data, ctx);
      reserveTaxiCallback(data, ctx);
      closeTaxiRequestCallback(data, ctx);
      cancelReservationTaxiCallback(data, ctx);
      bookTaxiCallback(data, ctx);
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.on('message', async (ctx) => {
    const messageText = ctx.message.text;
    const role = ctx.session.role;
    const currentStep = ctx.session.registrationStep;

    if (role === 'passenger') {
      switch (messageText) {
        case 'üöó –ö–æ–ª–ª–µ–≥–∞ - –≤–æ–¥–∏—Ç–µ–ª—å':
          await showColleagueKeyboardPassenger(ctx);
          break;
        case 'üöï –¢–∞–∫—Å–∏':
          await showTaxiKeyboard(ctx);
          break;
        case 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
          await showUserProfileMenu(ctx);
          break;
        case '‚ÑπÔ∏è –û –±–æ—Ç–µ':
          await helpCallback(ctx);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          await showMainMenuPassenger(ctx);
          break;
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
        case 'üöñ –ó–∞–∫–∞–∑—ã–≤–∞—é—â–∏–π':
          await showPassengerOrderedTaxiKeyboard(ctx);
          break;
        case 'üöï –ü–∞—Å—Å–∞–∂–∏—Ä':
          await showPassengerTaxiKeyboard(ctx);
          break;
        case 'üöñ –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –Ω–∞ —Ç–∞–∫—Å–∏':
          await rideInATaxi(ctx);
          break;
        case '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å':
          await closeTaxiRequest(ctx);
          break;
        case 'üë• –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–æ–ø—É—Ç—á–∏–∫–æ–≤':
          await showMyCompanions(ctx);
          break;
        case 'üöó –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ':
          await pickDriver(ctx);
          break;
        case '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å':
          await cancelBook(ctx);
          break;
        case 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏':
          await myReservations(ctx);
          break;
        case 'üöô –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π':
          await showDrivers(ctx);
          break;
        case 'üöï –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –≤ —Ç–∞–∫—Å–∏':
          await bookTaxi(ctx);
          break;
        case '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –≤ —Ç–∞–∫—Å–∏':
          await cancelBookTaxi(ctx);
          break;
        case 'üë• –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–æ–ø—É—Ç—á–∏–∫–æ–≤ –∫–∞–∫ –ø–∞—Å—Å–∞–∂–∏—Ä':
          await showMyCompanionsAsPassenger(ctx);
          break;
        case 'üöó –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–µ —Ç–∞–∫—Å–∏':
          await showMyTaxi(ctx);
          break;
        case 'üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
          await showUserProfile(ctx);
          break;
        case '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
          await updateUserProfile(ctx);
          break;
        default:
          break;
      }
    } else if (ctx.session.role === 'driver') {
      switch (messageText) {
        case '–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤':
          await myPassengers(ctx);
          break;
        case 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
          await showUserProfileMenu(ctx);
          break;
        case '‚ÑπÔ∏è –û –±–æ—Ç–µ':
          return helpCallback(ctx);
        case 'üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
          await showUserProfile(ctx);
          break;
        case '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
          await updateUserProfile(ctx);
          break;
        case 'üîô –ù–∞–∑–∞–¥':
          await showMainMenuDrivers(ctx);
          break;
        default:
          break;
      }
    } else {
      switch (messageText) {
        case 'üîë –í—Ö–æ–¥ | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
          return loginOrRegisterCallback(ctx);
        case '‚ÑπÔ∏è –û –±–æ—Ç–µ':
          return helpCallback(ctx);
        default:
          break;
      }
    }

    if (!role) {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
      return;
    }

    if (role === 'passenger') {
      if (
        currentStep === 'ask_pickup_location' ||
        currentStep === 'ask_dropoff_location'
      ) {
        await handleTaxiRequestCreation(ctx);
      } else {
        await handlePassengerRegistration(ctx);
      }
    } else if (role === 'driver') {
      await handleDriverRegistration(ctx);
    }
  });

  bot.start();
};

export { startBot };
