const { InlineKeyboard, session } = require('grammy');
const { commands } = require('./commands');

const {
  validateName,
  validatePhoneNumber,
  validateCar,
  validateAge,
} = require('./middlewares');

const {
  pickDriverCallback,
  cancelReservationCallback,
  reserveTaxi,
  closeTaxiRequest,
  cancelReservationTaxiCallback,
  bookTaxiCallback,
} = require('./callbacks/callbacks');

const {
  Driver,
  User,
  UserReservation,
  TaxiRequest,
} = require('./database/models');

const startBot = (bot) => {
  bot.use(
    session({
      initial: () => ({
        userData: {},
        registrationStep: null,
        isLoggedIn: null,
        role: null,
      }),
    })
  );

  bot.api.setMyCommands(commands);

  bot.command('start', async (ctx) => {
    const startKeyboard = new InlineKeyboard()
      .text('–í–æ–¥–∏—Ç–µ–ª—å', 'driver')
      .text('–ü–∞—Å—Å–∞–∂–∏—Ä', 'passenger');

    await ctx.reply(
      `–ü—Ä–∏–≤–µ—Ç —è CarShareBot! üëã

      –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ. üöó

      –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ(/help), –∏ –º—ã –ø–æ–º–æ–∂–µ–º!

      –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!`,
      {
        reply_markup: startKeyboard,
      }
    );
  });

  bot.command('help', async (ctx) => {
    const role = ctx.session.role;

    const passengerCommands = `
      /book - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –≤ –º–∞—à–∏–Ω–µ
      /cancel_reservation - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      /show_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      /show_drivers - –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π
      /my_reservations - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      /show_my_taxi - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ç–∞–∫—Å–∏
      /show_my_companions - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–æ–ø—É—Ç—á–∏–∫–æ–≤
      /book_taxi - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –≤ —Ç–∞–∫—Å–∏
      /cancel_taxi_reservation - –û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å –≤ —Ç–∞–∫—Å–∏
    `;

    const driverCommands = `
      /show_profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      /show_my_passengers - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏—Ö –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
    `;

    const generalCommands = `
      /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
      /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥
    `;

    const response = `
      –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç –≤ –º–∞—à–∏–Ω–µ –Ω–∞ –ø—É—Ç–∏ –¥–æ–º–æ–π. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
  
      ${generalCommands}
      
      ${role === 'passenger' ? passengerCommands : ''}
      ${role === 'driver' ? driverCommands : ''}
  
      –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /book –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.
  
      –£–¥–∞—á–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!
    `;

    await ctx.reply(response);
  });

  bot.command('my_reservations', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const reservations = await UserReservation.find();

        const seatMapping = {
          front: '—Å–ø–µ—Ä–µ–¥–∏',
          left: '—Å–ª–µ–≤–∞',
          center: '–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ',
          right: '—Å–ø—Ä–∞–≤–∞',
        };

        let response = '';

        for (const reservation of reservations) {
          const driver = await Driver.findOne({
            driverId: reservation.driverId,
          });

          if (driver) {
            response += `–í–æ–¥–∏—Ç–µ–ª—å: ${driver.name}\n–ú–∞—à–∏–Ω–∞: ${
              driver.car
            }\n–ú–µ—Å—Ç–æ: ${seatMapping[reservation.seat]}\n\n`;
          } else {
            console.log(
              '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å driverId:',
              reservation.driverId
            );
          }
        }

        if (response) {
          await ctx.reply(`–°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–µ–π:\n\n ${response}`);
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('show_my_passengers', async (ctx) => {
    if (ctx.session.role === 'driver') {
      try {
        const driver = await Driver.findOne({ driverId: ctx.from.id });

        if (!driver) {
          return await ctx.reply('–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const seatMapping = {
          front: '—Å–ø–µ—Ä–µ–¥–∏',
          left: '—Å–ª–µ–≤–∞',
          center: '–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ',
          right: '—Å–ø—Ä–∞–≤–∞',
        };

        const occupiedSeats = Object.keys(driver.seats).filter(
          (seat) => !driver.seats[seat]
        );

        if (occupiedSeats.length === 0) {
          return await ctx.reply('–ù–µ—Ç –∑–∞–Ω—è—Ç—ã—Ö –º–µ—Å—Ç.');
        }

        let response = `–ó–∞–Ω—è—Ç—ã–µ –º–µ—Å—Ç–∞ —É –≤–æ–¥–∏—Ç–µ–ª—è ${driver.name}:\n\n`;

        occupiedSeats.forEach((seat) => {
          response += `–ú–µ—Å—Ç–æ ${seatMapping[seat]}: ${
            driver.passengers[seat] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Å—Å–∞–∂–∏—Ä'
          }\n`;
        });

        await ctx.reply(response);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö:', error);
        await ctx.reply(
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞—Ö.'
        );
      }
    } else if (ctx.session.role === 'passenger') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('show_drivers', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const drivers = await Driver.find();
        const driverList = drivers
          .map(
            (driver) =>
              `–ò–º—è: ${driver.name},\n–¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone},\n–ú–∞—à–∏–Ω–∞: ${driver.car}, \n–í–æ–∑—Ä–∞—Å—Ç: ${driver.age}`
          )
          .join('\n\n');

        if (driverList.length === 0) {
          return ctx.reply(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π >_<'
          );
        }

        await ctx.reply(`–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π:\n\n${driverList}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.callbackQuery('driver', async (ctx) => {
    ctx.session.role = 'driver';
    ctx.session.registrationStep = 'ask_name';

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è: ');

    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });
  });

  bot.callbackQuery('passenger', async (ctx) => {
    ctx.session.role = 'passenger';
    ctx.session.registrationStep = 'ask_name';

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è: ');

    await ctx.editMessageReplyMarkup({
      reply_markup: { inline_keyboard: [] },
    });
  });

  bot.command('show_profile', async (ctx) => {
    const user = await User.findOne({ telegramId: ctx.from.id });
    const driver = await Driver.findOne({ driverId: user.telegramId });

    if (ctx.session.role === 'passenger') {
      ctx.reply(
        `–ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: ${user.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n–†–æ–ª—å: –ø–∞—Å—Å–∞–∂–∏—Ä`
      );
    } else if (ctx.session.role === 'driver') {
      ctx.reply(
        `–ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: ${driver.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}\n–†–æ–ª—å: –≤–æ–¥–∏—Ç–µ–ª—å\n–í–æ–∑—Ä–∞—Å—Ç:${driver.age}\n–ú–∞—à–∏–Ω–∞: ${driver.car}`
      );
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('show_my_taxi', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const user = await User.findOne({ telegramId: ctx.from.id });
        const myTaxiRequests = await TaxiRequest.find({
          creatorId: user._id,
          status: 'open',
        });

        if (myTaxiRequests.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫—Å–∏.');
          return;
        }

        const myTaxiKeyboard = new InlineKeyboard();

        for (const request of myTaxiRequests) {
          myTaxiKeyboard
            .text(
              `–° ${request.pickupLocation} –¥–æ ${request.dropoffLocation}`,
              `close_${request._id}`
            )
            .row();
        }

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–∫—Å–∏: ', {
          reply_markup: myTaxiKeyboard,
        });
      } catch (error) {
        console.error(
          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫—Å–∏:',
          error.message
        );
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫—Å–∏.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('show_my_companions', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const user = await User.findOne({ telegramId: ctx.from.id });

        const taxiRequests = await TaxiRequest.find({
          creatorId: user._id,
          status: 'open',
        });

        if (taxiRequests.length === 0) {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∞–∫—Å–∏.');
          return;
        }

        let companionsList = '';

        for (const taxiRequest of taxiRequests) {
          let requestCompanions = '';

          for (const passengerId of taxiRequest.passengerIds) {
            const passenger = await User.findById(passengerId);

            if (passenger) {
              requestCompanions += `- ${passenger.name}\n`;
            }
          }

          if (requestCompanions) {
            companionsList += `–ü–æ–ø—É—Ç—á–∏–∫–∏ —Å ${taxiRequest.pickupLocation} –¥–æ ${taxiRequest.dropoffLocation}:\n${requestCompanions}\n`;
          }
        }

        if (companionsList) {
          await ctx.reply(companionsList);
        } else {
          await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.');
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É—Ç—á–∏–∫–æ–≤: ', err.message);
        await ctx.reply('–û—à–∏–±–∫–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('show_my_companions_as_passenger', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const user = await User.findOne({ telegramId: ctx.from.id });

        const taxiRequests = await TaxiRequest.find({
          passengerIds: user._id,
          status: 'open',
        });

        if (taxiRequests.length === 0) {
          await ctx.reply('–í—ã –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–æ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç–∞–∫—Å–∏.');
          return;
        }

        let companionsList = '';

        for (const taxiRequest of taxiRequests) {
          const creator = await User.findById(taxiRequest.creatorId);

          companionsList += `–ó–∞–ø—Ä–æ—Å —Ç–∞–∫—Å–∏ —Å ${taxiRequest.pickupLocation} –¥–æ ${taxiRequest.dropoffLocation}:\n`;
          companionsList += `–°–æ–∑–¥–∞—Ç–µ–ª—å: ${
            creator ? creator.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
          }\n`;
          companionsList += '–ü–æ–ø—É—Ç—á–∏–∫–∏:\n';

          for (const passengerId of taxiRequest.passengerIds) {
            const passenger = await User.findById(passengerId);
            if (passenger) {
              companionsList += `- ${passenger.name}\n`;
            }
          }
          companionsList += '\n';
        }

        await ctx.reply(companionsList || '–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.');
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É—Ç—á–∏–∫–æ–≤: ', err.message);
        await ctx.reply('–û—à–∏–±–∫–∞ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ –ø–æ–ø—É—Ç—á–∏–∫–æ–≤.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('book', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const drivers = await Driver.find();

        const driversWithFreeSeats = drivers.filter((driver) => {
          return (
            driver.seats.front ||
            driver.seats.left ||
            driver.seats.center ||
            driver.seats.right
          );
        });

        if (driversWithFreeSeats.length === 0) {
          await ctx.reply(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.'
          );
          return;
        }

        const driversKeyboard = new InlineKeyboard();

        driversWithFreeSeats.forEach((driver) => {
          driversKeyboard
            .text(driver.name, `picked_driver_${driver.driverId}`)
            .row();
        });

        const message = await ctx.reply('–í–æ–¥–∏—Ç–µ–ª–∏ —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –º–µ—Å—Ç–∞–º–∏: ', {
          reply_markup: driversKeyboard,
        });

        ctx.session.lastMessageId = message.message_id;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error.message);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('book_taxi', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      try {
        const user = await User.findOne({ telegramId: ctx.from.id });
        const activeTaxis = await TaxiRequest.find({
          creatorId: { $ne: user._id },
          status: 'open',
        });

        if (activeTaxis.length === 0) {
          await ctx.reply('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–∫—Å–∏.');
          return;
        }

        const taxiListKeyboard = new InlineKeyboard();

        for (const taxi of activeTaxis) {
          taxiListKeyboard
            .text(
              `–° ${taxi.pickupLocation} –¥–æ ${taxi.dropoffLocation}`,
              `taxi_book_${taxi._id}`
            )
            .row();
        }

        const message = await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–∫—Å–∏, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ:',
          {
            reply_markup: taxiListKeyboard,
          }
        );

        ctx.session.lastMessageId = message.message_id;
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ç–∞–∫—Å–∏: ', err.message);
        await ctx.reply('–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ç–∞–∫—Å–∏.');
      }
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('cancel_reservation', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      const userId = ctx.from.id;

      const reservations = await UserReservation.find({ userId });

      if (reservations.length === 0) {
        return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π.');
      }

      const seatMapping = {
        front: '—Å–ø–µ—Ä–µ–¥–∏',
        left: '—Å–ª–µ–≤–∞',
        center: '–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ',
        right: '—Å–ø—Ä–∞–≤–∞',
      };

      const cancelKeyboard = new InlineKeyboard();

      for (const reservation of reservations) {
        const driver = await Driver.findOne({ driverId: reservation.driverId });

        if (driver) {
          cancelKeyboard
            .text(
              `–û—Ç–º–µ–Ω–∏—Ç—å ${seatMapping[reservation.seat]} —É ${driver.name}`,
              `cancel_${reservation._id}`
            )
            .row();
        } else {
          cancelKeyboard
            .text(
              `–û—Ç–º–µ–Ω–∏—Ç—å ${seatMapping[reservation.seat]} —É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ`,
              `cancel_${reservation._id}`
            )
            .row();
        }
      }

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã:', {
        reply_markup: cancelKeyboard,
      });
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('cancel_taxi_reservation', async (ctx) => {
    try {
      const user = await User.findOne({ telegramId: ctx.from.id });

      const reservations = await TaxiRequest.find({
        passengerIds: user._id,
        status: 'open',
      });
      console.log(user, reservations);

      if (reservations.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–µ–π –≤ —Ç–∞–∫—Å–∏.');
        return;
      }

      const reservationKeyboard = new InlineKeyboard();

      for (const reservation of reservations) {
        reservationKeyboard
          .text(
            `–° ${reservation.pickupLocation} –¥–æ ${reservation.dropoffLocation}`,
            `taxi_cancel_${reservation._id}`
          )
          .row();
      }

      const message = await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å: ',
        {
          reply_markup: reservationKeyboard,
        }
      );

      ctx.session.lastMessageId = message.message_id;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏: ', err.message);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏.');
    }
  });

  bot.command('ride_in_a_taxi', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      ctx.session.registrationStep = 'ask_pickup_location';
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ');
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤!');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.command('close_taxi_request', async (ctx) => {
    try {
      const user = await User.findOne({ telegramId: ctx.from.id });

      const taxiRequests = await TaxiRequest.find({
        creatorId: user._id,
        status: 'open',
      });

      console.log(user, taxiRequests);

      if (taxiRequests.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–∞–∫—Å–∏.');
        return;
      }

      const taxiRequestKeyboard = new InlineKeyboard();
      taxiRequests.forEach((request) => {
        taxiRequestKeyboard
          .text(
            `–° ${request.pickupLocation} –¥–æ ${request.dropoffLocation}`,
            `close_${request._id}`
          )
          .row();
      });

      const message = await ctx.reply(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å: ',
        {
          reply_markup: taxiRequestKeyboard,
        }
      );

      ctx.session.lastMessageId = message.message_id;
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–∞–∫—Å–∏', err.message);
      await ctx.reply('–û—à–∏–±–∫–∞ —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å —Ç–∞–∫—Å–∏.');
    }
  });

  bot.on('callback_query:data', async (ctx) => {
    if (ctx.session.role === 'passenger') {
      const data = ctx.callbackQuery.data;

      pickDriverCallback(data, ctx);
      cancelReservationCallback(data, ctx);
      reserveTaxi(data, ctx);
      closeTaxiRequest(data, ctx);
      cancelReservationTaxiCallback(data, ctx);
      bookTaxiCallback(data, ctx);
    } else if (ctx.session.role === 'driver') {
      await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.on('message', async (ctx) => {
    const currentStep = ctx.session.registrationStep;
    const role = ctx.session.role;

    if (role === 'passenger') {
      if (currentStep === 'ask_pickup_location') {
        ctx.session.taxiRequest = {
          pickupLocation: ctx.message.text.trim(),
        };
        ctx.session.registrationStep = 'ask_dropoff_location';
        return await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ');
      } else if (currentStep === 'ask_dropoff_location') {
        ctx.session.taxiRequest.dropoffLocation = ctx.message.text.trim();

        const user = await User.findOne({ telegramId: ctx.from.id });
        if (!user) {
          return await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }

        const newTaxiRequest = new TaxiRequest({
          creatorId: user._id,
          pickupLocation: ctx.session.taxiRequest.pickupLocation,
          dropoffLocation: ctx.session.taxiRequest.dropoffLocation,
          passengerIds: [],
        });

        await newTaxiRequest.save();

        const allPassengers = await User.find({
          role: 'passenger',
          telegramId: { $ne: ctx.from.id },
        });

        for (const passenger of allPassengers) {
          await bot.api.sendMessage(
            passenger.telegramId,
            `${passenger.name} –º–æ–∂–µ—Ç –í–∞—Å –ø–æ–¥–±—Ä–æ—Å–∏—Ç—å:\n–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${ctx.session.taxiRequest.pickupLocation}\n–ú–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${ctx.session.taxiRequest.dropoffLocation}\n`
          );

          await bot.api.sendMessage(
            passenger.telegramId,
            ' –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ',
                      callback_data: `reserve_taxi_${newTaxiRequest._id}`,
                    },
                  ],
                ],
              },
            }
          );
        }

        await ctx.reply(
          '–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–∞–∫—Å–∏ —Å–æ–∑–¥–∞–Ω. –ü–∞—Å—Å–∞–∂–∏—Ä—ã –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.'
        );
        ctx.session.registrationStep = null;
        delete ctx.session.taxiRequest;
      } else if (currentStep === 'ask_name') {
        await validateName(ctx);
      } else if (currentStep === 'ask_phone_number') {
        await validatePhoneNumber(ctx);
      }
    } else if (role === 'driver') {
      if (currentStep === 'ask_name') {
        await validateName(ctx);
      } else if (currentStep === 'ask_phone_number') {
        await validatePhoneNumber(ctx);
      } else if (currentStep === 'ask_car') {
        await validateCar(ctx);
      } else if (currentStep === 'ask_age') {
        await validateAge(ctx);
      }
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
    }
  });

  bot.start();
};

module.exports = { startBot };
